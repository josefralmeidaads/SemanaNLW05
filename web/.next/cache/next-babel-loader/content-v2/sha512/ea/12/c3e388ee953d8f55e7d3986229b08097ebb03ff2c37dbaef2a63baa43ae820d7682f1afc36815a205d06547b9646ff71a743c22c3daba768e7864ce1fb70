{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\NLW05\\\\web\\\\src\\\\contexts\\\\PlayerContext.tsx\";\nimport { createContext, useContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport const PlayerProvider = ({\n  children\n}) => {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n\n  const play = episode => {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  };\n\n  const playList = (list, index) => {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  };\n\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const onPlayKeyboard = data => {\n    setIsPlaying(data);\n  };\n\n  const playNext = () => {\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  };\n\n  const playPrevious = () => {\n    setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      currentEpisodeIndex,\n      episodeList,\n      isPlaying,\n      play,\n      togglePlay,\n      onPlayKeyboard,\n      playList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\nexport function usePlayer() {\n  const {\n    play,\n    togglePlay,\n    onPlayKeyboard,\n    playList,\n    currentEpisodeIndex,\n    episodeList,\n    isPlaying\n  } = useContext(PlayerContext);\n  return {\n    play,\n    togglePlay,\n    onPlayKeyboard,\n    playList,\n    currentEpisodeIndex,\n    episodeList,\n    isPlaying\n  };\n}","map":{"version":3,"sources":["C:/NLW05/web/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerProvider","children","episodeList","setEpisodeList","isPlaying","setIsPlaying","currentEpisodeIndex","setCurrentEpisodeIndex","play","episode","playList","list","index","togglePlay","onPlayKeyboard","data","playNext","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AA+BA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAoB,EAApB,CAAnC;AAEP,OAAO,MAAMI,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA8C;AAC1E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACQ,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDT,QAAQ,CAAC,CAAD,CAA9D;;AAEA,QAAMU,IAAI,GAAIC,OAAD,IAAsB;AACjCN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAF,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAJD;;AAMA,QAAMK,QAAQ,GAAG,CAACC,IAAD,EAAkBC,KAAlB,KAAoC;AACnDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAACK,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAJD;;AAMA,QAAMQ,UAAU,GAAG,MAAM;AACvBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAIA,QAAMU,cAAc,GAAIC,IAAD,IAAmB;AACxCV,IAAAA,YAAY,CAACU,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACrBT,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD,GAFD;;AAIA,QAAMW,YAAY,GAAG,MAAM;AACzBV,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,mBADK;AAELJ,MAAAA,WAFK;AAGLE,MAAAA,SAHK;AAILI,MAAAA,IAJK;AAKLK,MAAAA,UALK;AAMLC,MAAAA,cANK;AAOLJ,MAAAA;AAPK,KADT;AAAA,cAWGT;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhDM;AAkDP,OAAO,SAASiB,SAAT,GAAoB;AACxB,QAAM;AAAEV,IAAAA,IAAF;AAAQK,IAAAA,UAAR;AAAoBC,IAAAA,cAApB;AAAoCJ,IAAAA,QAApC;AAA8CJ,IAAAA,mBAA9C;AAAmEJ,IAAAA,WAAnE;AAAgFE,IAAAA;AAAhF,MAA8FP,UAAU,CAACE,aAAD,CAA9G;AAEA,SAAO;AAAES,IAAAA,IAAF;AAAQK,IAAAA,UAAR;AAAoBC,IAAAA,cAApB;AAAoCJ,IAAAA,QAApC;AAA8CJ,IAAAA,mBAA9C;AAAmEJ,IAAAA,WAAnE;AAAgFE,IAAAA;AAAhF,GAAP;AACF","sourcesContent":["import { createContext, useContext, useState } from 'react';\r\nimport { ReactNode } from 'react';\r\n\r\ninterface Episode {\r\n  id: string,      \r\n  title: string,\r\n  members: string,\r\n  published_at: string,\r\n  thumbnail: string,\r\n  description: string,\r\n  url: string,\r\n  duration: number,\r\n  published_at_Formatted: string,\r\n  durationFormatted: string\r\n}\r\n\r\ninterface PlayerContextData {\r\n  episodeList: Episode[];\r\n  currentEpisodeIndex: number;\r\n  isPlaying: boolean;\r\n  play: (episode) => void;\r\n  togglePlay: () => void;\r\n  onPlayKeyboard: (data: boolean) => void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n}\r\n\r\ninterface PlayerContextProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const PlayerContext = createContext<PlayerContextData>({} as PlayerContextData);\r\n\r\nexport const PlayerProvider = ({ children }: PlayerContextProviderProps) => {\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n\r\n  const play = (episode: Episode) => {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  const playList = (list: Episode[], index: number) => {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  const togglePlay = () => {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  const onPlayKeyboard = (data: boolean) => {\r\n    setIsPlaying(data);\r\n  }\r\n\r\n  const playNext = () => {\r\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n  }\r\n\r\n  const playPrevious = () => {\r\n    setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider \r\n      value={{\r\n        currentEpisodeIndex,\r\n        episodeList,\r\n        isPlaying,\r\n        play,\r\n        togglePlay,\r\n        onPlayKeyboard,\r\n        playList,\r\n      }}\r\n    >\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  );\r\n}\r\n\r\nexport function usePlayer(){\r\n   const { play, togglePlay, onPlayKeyboard, playList, currentEpisodeIndex, episodeList, isPlaying } = useContext(PlayerContext);\r\n\r\n   return { play, togglePlay, onPlayKeyboard, playList, currentEpisodeIndex, episodeList, isPlaying };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}