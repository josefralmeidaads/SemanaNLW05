{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\NLW05\\\\web\\\\src\\\\pages\\\\episodes\\\\[slug].tsx\";\nimport React, { useEffect, useRef } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport api from '../../services/api';\nimport convertDurationToTimeString from '../../utils/convertDurationToTimeString';\nimport { Container, Episode, ThumbnailContainer, ThumbnailButton, ButtonPlay, Header, Description } from '../../styles/stylesEpisode';\nimport { usePlayer } from '../../contexts/PlayerContext';\n\nconst episodes = ({\n  episode\n}) => {\n  const {\n    play,\n    onPlayKeyboard,\n    isPlaying\n  } = usePlayer();\n  const audioRef = useRef(null);\n  useEffect(() => {\n    if (!audioRef.current) {\n      return;\n    }\n\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Episode, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: episode.url,\n        onPlay: () => onPlayKeyboard(true),\n        onPause: () => onPlayKeyboard(false),\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThumbnailContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          href: \"/\",\n          children: /*#__PURE__*/_jsxDEV(ThumbnailButton, {\n            type: \"button\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/arrow-left.svg\",\n              alt: \"voltar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Image, {\n          src: episode.thumbnail,\n          alt: episode.title,\n          width: 700,\n          height: 160,\n          objectFit: \"cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonPlay, {\n          type: \"button\",\n          onClick: () => play(episode),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/play.svg\",\n            alt: \"Tocar epis\\xF3dio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: episode.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: episode.members\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: episode.published_at_Formatted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: episode.durationFormatted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        dangerouslySetInnerHTML: {\n          __html: episode.description\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const {\n    data\n  } = await api.get('/episodes', {\n    params: {\n      _limit: 2,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const paths = data.map(episode => {\n    return {\n      params: {\n        slug: episode.id\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    slug\n  } = context.params;\n  const {\n    data\n  } = await api.get(`/episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    members: data.members,\n    published_at: data.published_at,\n    published_at_Formatted: format(parseISO(data.published_at), 'd MMM yy', {\n      locale: ptBR\n    }),\n    thumbnail: data.thumbnail,\n    description: data.description,\n    duration: Number(data.file.duration),\n    durationFormatted: convertDurationToTimeString(Number(data.file.duration)),\n    url: String(data.file.url)\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidate: 60 * 60 * 24 // segundos * minutos * horas\n\n  };\n};\nexport default episodes;","map":{"version":3,"sources":["C:/NLW05/web/src/pages/episodes/[slug].tsx"],"names":["React","useEffect","useRef","Link","Image","format","parseISO","ptBR","api","convertDurationToTimeString","Container","Episode","ThumbnailContainer","ThumbnailButton","ButtonPlay","Header","Description","usePlayer","episodes","episode","play","onPlayKeyboard","isPlaying","audioRef","current","pause","url","thumbnail","title","members","published_at_Formatted","durationFormatted","__html","description","getStaticPaths","data","get","params","_limit","_sort","_order","paths","map","slug","id","fallback","getStaticProps","context","published_at","locale","duration","Number","file","String","props","revalidate"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Link from 'next/link';\r\nimport { useRouter } from 'next/router';\r\nimport Image from 'next/image';\r\nimport { GetStaticPaths, GetStaticProps } from 'next';\r\nimport format from 'date-fns/format';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport ptBR from 'date-fns/locale/pt-BR';\r\n\r\nimport api from '../../services/api';\r\nimport convertDurationToTimeString from '../../utils/convertDurationToTimeString';\r\nimport {\r\n  Container, \r\n  Episode,\r\n  ThumbnailContainer,\r\n  ThumbnailButton,\r\n  ButtonPlay,\r\n  Header,\r\n  Description, \r\n} from '../../styles/stylesEpisode';\r\nimport { usePlayer } from '../../contexts/PlayerContext';\r\n\r\ntype Episode = {\r\n  id: string,      \r\n  title: string,\r\n  members: string,\r\n  published_at: string,\r\n  thumbnail: string,\r\n  description: string,\r\n  url: string,\r\n  duration: number,\r\n  published_at_Formatted: string,\r\n  durationFormatted: string\r\n}\r\n\r\ntype EpisodeProps = {\r\n  episode: Episode;\r\n}\r\n\r\nconst episodes: React.FC<EpisodeProps> = ({ episode }: EpisodeProps) => {\r\n  const { play, onPlayKeyboard, isPlaying } = usePlayer();\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n\r\n  useEffect(() => {\r\n    if(!audioRef.current){\r\n      return;\r\n    }\r\n\r\n    if(isPlaying){\r\n      audioRef.current.play();\r\n    } else {\r\n      audioRef.current.pause();\r\n    }\r\n  }, [isPlaying])\r\n\r\n  return (\r\n    <Container>\r\n      <Episode>\r\n        <audio\r\n          ref={audioRef}\r\n          src={episode.url}\r\n          onPlay={() => onPlayKeyboard(true)} \r\n          onPause={() => onPlayKeyboard(false)}\r\n          autoPlay \r\n        />\r\n        <ThumbnailContainer>\r\n          <Link href=\"/\">\r\n            <ThumbnailButton type=\"button\">\r\n              <img src=\"/arrow-left.svg\" alt=\"voltar\"/>\r\n            </ThumbnailButton>\r\n          </Link>\r\n          <Image \r\n            src={episode.thumbnail}\r\n            alt={episode.title}\r\n            width={700}\r\n            height={160}\r\n            objectFit=\"cover\"\r\n          />\r\n\r\n          <ButtonPlay type=\"button\" onClick={() => play(episode)}>\r\n            <img src=\"/play.svg\" alt=\"Tocar episódio\"/>\r\n          </ButtonPlay>\r\n        </ThumbnailContainer>\r\n\r\n        <Header>\r\n          <h1>{episode.title}</h1>\r\n          <span>{episode.members}</span>\r\n          <span>{episode.published_at_Formatted}</span>\r\n          <span>{episode.durationFormatted}</span>\r\n        </Header>\r\n\r\n        <Description \r\n          dangerouslySetInnerHTML={{ __html: episode.description }}\r\n        />\r\n      </Episode>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport const getStaticPaths: GetStaticPaths = async() => {\r\n  const { data } = await api.get('/episodes', {\r\n    params: {\r\n      _limit: 2,\r\n      _sort: 'published_at',\r\n      _order: 'desc'\r\n    }\r\n  });\r\n\r\n  const paths = data.map((episode) => {\r\n    return {\r\n      params: {\r\n        slug: episode.id\r\n      },\r\n    };\r\n  })\r\n\r\n  return {\r\n    paths,\r\n    fallback: 'blocking',\r\n  }\r\n}\r\n\r\nexport const getStaticProps: GetStaticProps = async(context) => {\r\n  const { slug } = context.params;\r\n\r\n  const { data } = await api.get(`/episodes/${slug}`);\r\n\r\n  const episode = {\r\n    id: data.id,\r\n    title: data.title,\r\n    members: data.members,\r\n    published_at: data.published_at,\r\n    published_at_Formatted: format(parseISO(data.published_at), 'd MMM yy', { locale: ptBR }),\r\n    thumbnail: data.thumbnail,\r\n    description: data.description,\r\n    duration: Number(data.file.duration),\r\n    durationFormatted: convertDurationToTimeString(Number(data.file.duration)),\r\n    url: String(data.file.url),\r\n  }\r\n  return {\r\n    props: {\r\n      episode,\r\n    },\r\n    revalidate: 60 * 60 * 24, // segundos * minutos * horas\r\n  };\r\n}\r\n\r\nexport default episodes;"]},"metadata":{},"sourceType":"module"}